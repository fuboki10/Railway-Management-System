//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RailwaySystem
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class RailWaySystemDBEntities3 : DbContext
    {
        public RailWaySystemDBEntities3()
            : base("name=RailWaySystemDBEntities3")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Coach_Yard> Coach_Yard { get; set; }
        public DbSet<Employee> Employees { get; set; }
        public DbSet<Employee_Contact> Employee_Contact { get; set; }
        public DbSet<Employee_Phone> Employee_Phone { get; set; }
        public DbSet<Job> Jobs { get; set; }
        public DbSet<Passenger> Passengers { get; set; }
        public DbSet<Passenger_Contact> Passenger_Contact { get; set; }
        public DbSet<Passenger_Phone> Passenger_Phone { get; set; }
        public DbSet<Passenger_Subscription> Passenger_Subscription { get; set; }
        public DbSet<Repair_Yard> Repair_Yard { get; set; }
        public DbSet<Route> Routes { get; set; }
        public DbSet<Station> Stations { get; set; }
        public DbSet<Subscription> Subscriptions { get; set; }
        public DbSet<Ticket> Tickets { get; set; }
        public DbSet<Train> Trains { get; set; }
        public DbSet<Trip> Trips { get; set; }
        public DbSet<USER> USERs { get; set; }
    
        public virtual int Add_Subscription(Nullable<int> fees, string @class, Nullable<int> no_Trips)
        {
            var feesParameter = fees.HasValue ?
                new ObjectParameter("Fees", fees) :
                new ObjectParameter("Fees", typeof(int));
    
            var classParameter = @class != null ?
                new ObjectParameter("Class", @class) :
                new ObjectParameter("Class", typeof(string));
    
            var no_TripsParameter = no_Trips.HasValue ?
                new ObjectParameter("No_Trips", no_Trips) :
                new ObjectParameter("No_Trips", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_Subscription", feesParameter, classParameter, no_TripsParameter);
        }
    
        public virtual int AddRepairYard(Nullable<int> station_id, Nullable<int> size)
        {
            var station_idParameter = station_id.HasValue ?
                new ObjectParameter("station_id", station_id) :
                new ObjectParameter("station_id", typeof(int));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("size", size) :
                new ObjectParameter("size", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRepairYard", station_idParameter, sizeParameter);
        }
    
        public virtual int AddRoute(Nullable<int> source_id, Nullable<int> dest_id, Nullable<int> distance)
        {
            var source_idParameter = source_id.HasValue ?
                new ObjectParameter("source_id", source_id) :
                new ObjectParameter("source_id", typeof(int));
    
            var dest_idParameter = dest_id.HasValue ?
                new ObjectParameter("dest_id", dest_id) :
                new ObjectParameter("dest_id", typeof(int));
    
            var distanceParameter = distance.HasValue ?
                new ObjectParameter("distance", distance) :
                new ObjectParameter("distance", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRoute", source_idParameter, dest_idParameter, distanceParameter);
        }
    
        public virtual int Book_Seat(string @class, Nullable<System.DateTime> date, Nullable<int> price, Nullable<int> trip_ID, Nullable<int> booking_Clerk_ID, Nullable<int> passenger_ID)
        {
            var classParameter = @class != null ?
                new ObjectParameter("Class", @class) :
                new ObjectParameter("Class", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(int));
    
            var trip_IDParameter = trip_ID.HasValue ?
                new ObjectParameter("Trip_ID", trip_ID) :
                new ObjectParameter("Trip_ID", typeof(int));
    
            var booking_Clerk_IDParameter = booking_Clerk_ID.HasValue ?
                new ObjectParameter("Booking_Clerk_ID", booking_Clerk_ID) :
                new ObjectParameter("Booking_Clerk_ID", typeof(int));
    
            var passenger_IDParameter = passenger_ID.HasValue ?
                new ObjectParameter("Passenger_ID", passenger_ID) :
                new ObjectParameter("Passenger_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Book_Seat", classParameter, dateParameter, priceParameter, trip_IDParameter, booking_Clerk_IDParameter, passenger_IDParameter);
        }
    
        public virtual int Cancel_Ticket(Nullable<int> ticket_ID)
        {
            var ticket_IDParameter = ticket_ID.HasValue ?
                new ObjectParameter("Ticket_ID", ticket_ID) :
                new ObjectParameter("Ticket_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Cancel_Ticket", ticket_IDParameter);
        }
    
        public virtual int DeleteStation(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteStation", idParameter);
        }
    
        public virtual int DeleteUser(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUser", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> get_emp_id_userId(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("get_emp_id_userId", userIDParameter);
        }
    
        public virtual ObjectResult<GetAllAdmins_Result> GetAllAdmins()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllAdmins_Result>("GetAllAdmins");
        }
    
        public virtual ObjectResult<getAllEmps_Result> getAllEmps()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllEmps_Result>("getAllEmps");
        }
    
        public virtual ObjectResult<string> GetUserJob(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetUserJob", userIDParameter);
        }
    
        public virtual ObjectResult<string> GetUsername(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetUsername", iDParameter);
        }
    
        public virtual int InsertEmp(string fname, string lname, Nullable<int> age, Nullable<System.DateTime> bd, Nullable<int> salary, Nullable<int> working_hours, Nullable<int> jobid, Nullable<int> station_id)
        {
            var fnameParameter = fname != null ?
                new ObjectParameter("fname", fname) :
                new ObjectParameter("fname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("lname", lname) :
                new ObjectParameter("lname", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("age", age) :
                new ObjectParameter("age", typeof(int));
    
            var bdParameter = bd.HasValue ?
                new ObjectParameter("bd", bd) :
                new ObjectParameter("bd", typeof(System.DateTime));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("salary", salary) :
                new ObjectParameter("salary", typeof(int));
    
            var working_hoursParameter = working_hours.HasValue ?
                new ObjectParameter("working_hours", working_hours) :
                new ObjectParameter("working_hours", typeof(int));
    
            var jobidParameter = jobid.HasValue ?
                new ObjectParameter("jobid", jobid) :
                new ObjectParameter("jobid", typeof(int));
    
            var station_idParameter = station_id.HasValue ?
                new ObjectParameter("station_id", station_id) :
                new ObjectParameter("station_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertEmp", fnameParameter, lnameParameter, ageParameter, bdParameter, salaryParameter, working_hoursParameter, jobidParameter, station_idParameter);
        }
    
        public virtual int InsertPassenger(string fname, string lname)
        {
            var fnameParameter = fname != null ?
                new ObjectParameter("fname", fname) :
                new ObjectParameter("fname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("lname", lname) :
                new ObjectParameter("lname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPassenger", fnameParameter, lnameParameter);
        }
    
        public virtual int InsertStation(string name, string state, string city, Nullable<int> street)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var streetParameter = street.HasValue ?
                new ObjectParameter("street", street) :
                new ObjectParameter("street", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertStation", nameParameter, stateParameter, cityParameter, streetParameter);
        }
    
        public virtual int InsertTrain(string model, Nullable<bool> status, string color, Nullable<int> no_Seats, Nullable<int> speed, Nullable<int> no_Cars, Nullable<System.DateTime> date, Nullable<int> driver_ID, Nullable<int> repair_Yard_ID, Nullable<int> coach_Yard_ID, Nullable<int> boughtByID)
        {
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var no_SeatsParameter = no_Seats.HasValue ?
                new ObjectParameter("No_Seats", no_Seats) :
                new ObjectParameter("No_Seats", typeof(int));
    
            var speedParameter = speed.HasValue ?
                new ObjectParameter("Speed", speed) :
                new ObjectParameter("Speed", typeof(int));
    
            var no_CarsParameter = no_Cars.HasValue ?
                new ObjectParameter("No_Cars", no_Cars) :
                new ObjectParameter("No_Cars", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var driver_IDParameter = driver_ID.HasValue ?
                new ObjectParameter("Driver_ID", driver_ID) :
                new ObjectParameter("Driver_ID", typeof(int));
    
            var repair_Yard_IDParameter = repair_Yard_ID.HasValue ?
                new ObjectParameter("Repair_Yard_ID", repair_Yard_ID) :
                new ObjectParameter("Repair_Yard_ID", typeof(int));
    
            var coach_Yard_IDParameter = coach_Yard_ID.HasValue ?
                new ObjectParameter("Coach_Yard_ID", coach_Yard_ID) :
                new ObjectParameter("Coach_Yard_ID", typeof(int));
    
            var boughtByIDParameter = boughtByID.HasValue ?
                new ObjectParameter("BoughtByID", boughtByID) :
                new ObjectParameter("BoughtByID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTrain", modelParameter, statusParameter, colorParameter, no_SeatsParameter, speedParameter, no_CarsParameter, dateParameter, driver_IDParameter, repair_Yard_IDParameter, coach_Yard_IDParameter, boughtByIDParameter);
        }
    
        public virtual int InsertTrip(Nullable<System.DateTime> dept_Time, Nullable<System.DateTime> arr_Time, Nullable<int> type, Nullable<int> destination_ID, Nullable<int> source_ID, Nullable<int> train_ID, Nullable<int> st_Manager_ID)
        {
            var dept_TimeParameter = dept_Time.HasValue ?
                new ObjectParameter("Dept_Time", dept_Time) :
                new ObjectParameter("Dept_Time", typeof(System.DateTime));
    
            var arr_TimeParameter = arr_Time.HasValue ?
                new ObjectParameter("Arr_Time", arr_Time) :
                new ObjectParameter("Arr_Time", typeof(System.DateTime));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var destination_IDParameter = destination_ID.HasValue ?
                new ObjectParameter("Destination_ID", destination_ID) :
                new ObjectParameter("Destination_ID", typeof(int));
    
            var source_IDParameter = source_ID.HasValue ?
                new ObjectParameter("Source_ID", source_ID) :
                new ObjectParameter("Source_ID", typeof(int));
    
            var train_IDParameter = train_ID.HasValue ?
                new ObjectParameter("Train_ID", train_ID) :
                new ObjectParameter("Train_ID", typeof(int));
    
            var st_Manager_IDParameter = st_Manager_ID.HasValue ?
                new ObjectParameter("St_Manager_ID", st_Manager_ID) :
                new ObjectParameter("St_Manager_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTrip", dept_TimeParameter, arr_TimeParameter, typeParameter, destination_IDParameter, source_IDParameter, train_IDParameter, st_Manager_IDParameter);
        }
    
        public virtual ObjectResult<InsertUser_Result> InsertUser(string username, string password, Nullable<int> employeeID, Nullable<bool> isAdmin, ObjectParameter responseMessage)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("IsAdmin", isAdmin) :
                new ObjectParameter("IsAdmin", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertUser_Result>("InsertUser", usernameParameter, passwordParameter, employeeIDParameter, isAdminParameter, responseMessage);
        }
    
        public virtual ObjectResult<Login_Result> Login(string userName, string password, ObjectParameter responseMessage)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Login_Result>("Login", userNameParameter, passwordParameter, responseMessage);
        }
    
        public virtual int Remove_Subscription(Nullable<int> subscription_ID)
        {
            var subscription_IDParameter = subscription_ID.HasValue ?
                new ObjectParameter("Subscription_ID", subscription_ID) :
                new ObjectParameter("Subscription_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Remove_Subscription", subscription_IDParameter);
        }
    
        public virtual int RemoveCoachYard(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveCoachYard", idParameter);
        }
    
        public virtual int RemoveRepairYard(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveRepairYard", idParameter);
        }
    
        public virtual int RemoveRoute(Nullable<int> source_id, Nullable<int> dest_id)
        {
            var source_idParameter = source_id.HasValue ?
                new ObjectParameter("source_id", source_id) :
                new ObjectParameter("source_id", typeof(int));
    
            var dest_idParameter = dest_id.HasValue ?
                new ObjectParameter("dest_id", dest_id) :
                new ObjectParameter("dest_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveRoute", source_idParameter, dest_idParameter);
        }
    
        public virtual int RemoveTrain(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveTrain", iDParameter);
        }
    
        public virtual int UpdateSalary(Nullable<int> id, Nullable<int> sal)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var salParameter = sal.HasValue ?
                new ObjectParameter("sal", sal) :
                new ObjectParameter("sal", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSalary", idParameter, salParameter);
        }
    
        public virtual int UpdateStation(Nullable<int> id, string name)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStation", idParameter, nameParameter);
        }
    }
}
